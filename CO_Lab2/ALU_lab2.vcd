$date
	Fri Jul 23 16:06:24 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module TestBench $end
$var wire 1 ! zero $end
$var wire 5 " shamt [4:0] $end
$var wire 32 # sftSrc [31:0] $end
$var wire 32 $ result_Shifter [31:0] $end
$var wire 32 % result_ALU [31:0] $end
$var wire 1 & overflow $end
$var wire 2 ' operation [1:0] $end
$var wire 1 ( leftRight $end
$var wire 1 ) invertB $end
$var wire 1 * invertA $end
$var wire 32 + aluSrc2 [31:0] $end
$var wire 32 , aluSrc1 [31:0] $end
$var reg 34 - ans_ALU [33:0] $end
$var reg 34 . ans_Shifter [33:0] $end
$var reg 1 / clk $end
$var reg 68 0 inp_ALU [67:0] $end
$var reg 68 1 inp_Shifter [67:0] $end
$var integer 32 2 i [31:0] $end
$var integer 32 3 score [31:0] $end
$scope module alu $end
$var wire 32 4 aluSrc1 [31:0] $end
$var wire 32 5 aluSrc2 [31:0] $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 2 6 operation [1:0] $end
$var wire 1 & overflow $end
$var wire 1 ! zero $end
$var wire 1 7 set $end
$var wire 32 8 result [31:0] $end
$var wire 32 9 carry [32:1] $end
$var reg 1 : A $end
$var reg 1 ; B $end
$var reg 1 < Result $end
$var reg 1 = Zero $end
$scope begin genblk1[1] $end
$scope module ALU_bit $end
$var wire 1 > a $end
$var wire 1 ? b $end
$var wire 1 @ carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 A less $end
$var wire 2 B operation [1:0] $end
$var wire 1 C result $end
$var wire 1 D carryOut $end
$var wire 1 E add $end
$var reg 1 F A $end
$var reg 1 G B $end
$var reg 1 C Result $end
$scope module M $end
$var wire 1 @ carryIn $end
$var wire 1 D carryOut $end
$var wire 1 F input1 $end
$var wire 1 G input2 $end
$var wire 1 E sum $end
$var wire 1 H w1 $end
$var wire 1 I w2 $end
$var wire 1 J w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$scope module ALU_bit $end
$var wire 1 K a $end
$var wire 1 L b $end
$var wire 1 M carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 N less $end
$var wire 2 O operation [1:0] $end
$var wire 1 P result $end
$var wire 1 Q carryOut $end
$var wire 1 R add $end
$var reg 1 S A $end
$var reg 1 T B $end
$var reg 1 P Result $end
$scope module M $end
$var wire 1 M carryIn $end
$var wire 1 Q carryOut $end
$var wire 1 S input1 $end
$var wire 1 T input2 $end
$var wire 1 R sum $end
$var wire 1 U w1 $end
$var wire 1 V w2 $end
$var wire 1 W w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$scope module ALU_bit $end
$var wire 1 X a $end
$var wire 1 Y b $end
$var wire 1 Z carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 [ less $end
$var wire 2 \ operation [1:0] $end
$var wire 1 ] result $end
$var wire 1 ^ carryOut $end
$var wire 1 _ add $end
$var reg 1 ` A $end
$var reg 1 a B $end
$var reg 1 ] Result $end
$scope module M $end
$var wire 1 Z carryIn $end
$var wire 1 ^ carryOut $end
$var wire 1 ` input1 $end
$var wire 1 a input2 $end
$var wire 1 _ sum $end
$var wire 1 b w1 $end
$var wire 1 c w2 $end
$var wire 1 d w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$scope module ALU_bit $end
$var wire 1 e a $end
$var wire 1 f b $end
$var wire 1 g carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 h less $end
$var wire 2 i operation [1:0] $end
$var wire 1 j result $end
$var wire 1 k carryOut $end
$var wire 1 l add $end
$var reg 1 m A $end
$var reg 1 n B $end
$var reg 1 j Result $end
$scope module M $end
$var wire 1 g carryIn $end
$var wire 1 k carryOut $end
$var wire 1 m input1 $end
$var wire 1 n input2 $end
$var wire 1 l sum $end
$var wire 1 o w1 $end
$var wire 1 p w2 $end
$var wire 1 q w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$scope module ALU_bit $end
$var wire 1 r a $end
$var wire 1 s b $end
$var wire 1 t carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 u less $end
$var wire 2 v operation [1:0] $end
$var wire 1 w result $end
$var wire 1 x carryOut $end
$var wire 1 y add $end
$var reg 1 z A $end
$var reg 1 { B $end
$var reg 1 w Result $end
$scope module M $end
$var wire 1 t carryIn $end
$var wire 1 x carryOut $end
$var wire 1 z input1 $end
$var wire 1 { input2 $end
$var wire 1 y sum $end
$var wire 1 | w1 $end
$var wire 1 } w2 $end
$var wire 1 ~ w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$scope module ALU_bit $end
$var wire 1 !" a $end
$var wire 1 "" b $end
$var wire 1 #" carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 $" less $end
$var wire 2 %" operation [1:0] $end
$var wire 1 &" result $end
$var wire 1 '" carryOut $end
$var wire 1 (" add $end
$var reg 1 )" A $end
$var reg 1 *" B $end
$var reg 1 &" Result $end
$scope module M $end
$var wire 1 #" carryIn $end
$var wire 1 '" carryOut $end
$var wire 1 )" input1 $end
$var wire 1 *" input2 $end
$var wire 1 (" sum $end
$var wire 1 +" w1 $end
$var wire 1 ," w2 $end
$var wire 1 -" w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$scope module ALU_bit $end
$var wire 1 ." a $end
$var wire 1 /" b $end
$var wire 1 0" carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 1" less $end
$var wire 2 2" operation [1:0] $end
$var wire 1 3" result $end
$var wire 1 4" carryOut $end
$var wire 1 5" add $end
$var reg 1 6" A $end
$var reg 1 7" B $end
$var reg 1 3" Result $end
$scope module M $end
$var wire 1 0" carryIn $end
$var wire 1 4" carryOut $end
$var wire 1 6" input1 $end
$var wire 1 7" input2 $end
$var wire 1 5" sum $end
$var wire 1 8" w1 $end
$var wire 1 9" w2 $end
$var wire 1 :" w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[8] $end
$scope module ALU_bit $end
$var wire 1 ;" a $end
$var wire 1 <" b $end
$var wire 1 =" carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 >" less $end
$var wire 2 ?" operation [1:0] $end
$var wire 1 @" result $end
$var wire 1 A" carryOut $end
$var wire 1 B" add $end
$var reg 1 C" A $end
$var reg 1 D" B $end
$var reg 1 @" Result $end
$scope module M $end
$var wire 1 =" carryIn $end
$var wire 1 A" carryOut $end
$var wire 1 C" input1 $end
$var wire 1 D" input2 $end
$var wire 1 B" sum $end
$var wire 1 E" w1 $end
$var wire 1 F" w2 $end
$var wire 1 G" w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[9] $end
$scope module ALU_bit $end
$var wire 1 H" a $end
$var wire 1 I" b $end
$var wire 1 J" carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 K" less $end
$var wire 2 L" operation [1:0] $end
$var wire 1 M" result $end
$var wire 1 N" carryOut $end
$var wire 1 O" add $end
$var reg 1 P" A $end
$var reg 1 Q" B $end
$var reg 1 M" Result $end
$scope module M $end
$var wire 1 J" carryIn $end
$var wire 1 N" carryOut $end
$var wire 1 P" input1 $end
$var wire 1 Q" input2 $end
$var wire 1 O" sum $end
$var wire 1 R" w1 $end
$var wire 1 S" w2 $end
$var wire 1 T" w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[10] $end
$scope module ALU_bit $end
$var wire 1 U" a $end
$var wire 1 V" b $end
$var wire 1 W" carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 X" less $end
$var wire 2 Y" operation [1:0] $end
$var wire 1 Z" result $end
$var wire 1 [" carryOut $end
$var wire 1 \" add $end
$var reg 1 ]" A $end
$var reg 1 ^" B $end
$var reg 1 Z" Result $end
$scope module M $end
$var wire 1 W" carryIn $end
$var wire 1 [" carryOut $end
$var wire 1 ]" input1 $end
$var wire 1 ^" input2 $end
$var wire 1 \" sum $end
$var wire 1 _" w1 $end
$var wire 1 `" w2 $end
$var wire 1 a" w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[11] $end
$scope module ALU_bit $end
$var wire 1 b" a $end
$var wire 1 c" b $end
$var wire 1 d" carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 e" less $end
$var wire 2 f" operation [1:0] $end
$var wire 1 g" result $end
$var wire 1 h" carryOut $end
$var wire 1 i" add $end
$var reg 1 j" A $end
$var reg 1 k" B $end
$var reg 1 g" Result $end
$scope module M $end
$var wire 1 d" carryIn $end
$var wire 1 h" carryOut $end
$var wire 1 j" input1 $end
$var wire 1 k" input2 $end
$var wire 1 i" sum $end
$var wire 1 l" w1 $end
$var wire 1 m" w2 $end
$var wire 1 n" w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[12] $end
$scope module ALU_bit $end
$var wire 1 o" a $end
$var wire 1 p" b $end
$var wire 1 q" carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 r" less $end
$var wire 2 s" operation [1:0] $end
$var wire 1 t" result $end
$var wire 1 u" carryOut $end
$var wire 1 v" add $end
$var reg 1 w" A $end
$var reg 1 x" B $end
$var reg 1 t" Result $end
$scope module M $end
$var wire 1 q" carryIn $end
$var wire 1 u" carryOut $end
$var wire 1 w" input1 $end
$var wire 1 x" input2 $end
$var wire 1 v" sum $end
$var wire 1 y" w1 $end
$var wire 1 z" w2 $end
$var wire 1 {" w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[13] $end
$scope module ALU_bit $end
$var wire 1 |" a $end
$var wire 1 }" b $end
$var wire 1 ~" carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 !# less $end
$var wire 2 "# operation [1:0] $end
$var wire 1 ## result $end
$var wire 1 $# carryOut $end
$var wire 1 %# add $end
$var reg 1 &# A $end
$var reg 1 '# B $end
$var reg 1 ## Result $end
$scope module M $end
$var wire 1 ~" carryIn $end
$var wire 1 $# carryOut $end
$var wire 1 &# input1 $end
$var wire 1 '# input2 $end
$var wire 1 %# sum $end
$var wire 1 (# w1 $end
$var wire 1 )# w2 $end
$var wire 1 *# w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[14] $end
$scope module ALU_bit $end
$var wire 1 +# a $end
$var wire 1 ,# b $end
$var wire 1 -# carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 .# less $end
$var wire 2 /# operation [1:0] $end
$var wire 1 0# result $end
$var wire 1 1# carryOut $end
$var wire 1 2# add $end
$var reg 1 3# A $end
$var reg 1 4# B $end
$var reg 1 0# Result $end
$scope module M $end
$var wire 1 -# carryIn $end
$var wire 1 1# carryOut $end
$var wire 1 3# input1 $end
$var wire 1 4# input2 $end
$var wire 1 2# sum $end
$var wire 1 5# w1 $end
$var wire 1 6# w2 $end
$var wire 1 7# w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[15] $end
$scope module ALU_bit $end
$var wire 1 8# a $end
$var wire 1 9# b $end
$var wire 1 :# carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 ;# less $end
$var wire 2 <# operation [1:0] $end
$var wire 1 =# result $end
$var wire 1 ># carryOut $end
$var wire 1 ?# add $end
$var reg 1 @# A $end
$var reg 1 A# B $end
$var reg 1 =# Result $end
$scope module M $end
$var wire 1 :# carryIn $end
$var wire 1 ># carryOut $end
$var wire 1 @# input1 $end
$var wire 1 A# input2 $end
$var wire 1 ?# sum $end
$var wire 1 B# w1 $end
$var wire 1 C# w2 $end
$var wire 1 D# w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[16] $end
$scope module ALU_bit $end
$var wire 1 E# a $end
$var wire 1 F# b $end
$var wire 1 G# carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 H# less $end
$var wire 2 I# operation [1:0] $end
$var wire 1 J# result $end
$var wire 1 K# carryOut $end
$var wire 1 L# add $end
$var reg 1 M# A $end
$var reg 1 N# B $end
$var reg 1 J# Result $end
$scope module M $end
$var wire 1 G# carryIn $end
$var wire 1 K# carryOut $end
$var wire 1 M# input1 $end
$var wire 1 N# input2 $end
$var wire 1 L# sum $end
$var wire 1 O# w1 $end
$var wire 1 P# w2 $end
$var wire 1 Q# w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[17] $end
$scope module ALU_bit $end
$var wire 1 R# a $end
$var wire 1 S# b $end
$var wire 1 T# carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 U# less $end
$var wire 2 V# operation [1:0] $end
$var wire 1 W# result $end
$var wire 1 X# carryOut $end
$var wire 1 Y# add $end
$var reg 1 Z# A $end
$var reg 1 [# B $end
$var reg 1 W# Result $end
$scope module M $end
$var wire 1 T# carryIn $end
$var wire 1 X# carryOut $end
$var wire 1 Z# input1 $end
$var wire 1 [# input2 $end
$var wire 1 Y# sum $end
$var wire 1 \# w1 $end
$var wire 1 ]# w2 $end
$var wire 1 ^# w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[18] $end
$scope module ALU_bit $end
$var wire 1 _# a $end
$var wire 1 `# b $end
$var wire 1 a# carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 b# less $end
$var wire 2 c# operation [1:0] $end
$var wire 1 d# result $end
$var wire 1 e# carryOut $end
$var wire 1 f# add $end
$var reg 1 g# A $end
$var reg 1 h# B $end
$var reg 1 d# Result $end
$scope module M $end
$var wire 1 a# carryIn $end
$var wire 1 e# carryOut $end
$var wire 1 g# input1 $end
$var wire 1 h# input2 $end
$var wire 1 f# sum $end
$var wire 1 i# w1 $end
$var wire 1 j# w2 $end
$var wire 1 k# w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[19] $end
$scope module ALU_bit $end
$var wire 1 l# a $end
$var wire 1 m# b $end
$var wire 1 n# carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 o# less $end
$var wire 2 p# operation [1:0] $end
$var wire 1 q# result $end
$var wire 1 r# carryOut $end
$var wire 1 s# add $end
$var reg 1 t# A $end
$var reg 1 u# B $end
$var reg 1 q# Result $end
$scope module M $end
$var wire 1 n# carryIn $end
$var wire 1 r# carryOut $end
$var wire 1 t# input1 $end
$var wire 1 u# input2 $end
$var wire 1 s# sum $end
$var wire 1 v# w1 $end
$var wire 1 w# w2 $end
$var wire 1 x# w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[20] $end
$scope module ALU_bit $end
$var wire 1 y# a $end
$var wire 1 z# b $end
$var wire 1 {# carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 |# less $end
$var wire 2 }# operation [1:0] $end
$var wire 1 ~# result $end
$var wire 1 !$ carryOut $end
$var wire 1 "$ add $end
$var reg 1 #$ A $end
$var reg 1 $$ B $end
$var reg 1 ~# Result $end
$scope module M $end
$var wire 1 {# carryIn $end
$var wire 1 !$ carryOut $end
$var wire 1 #$ input1 $end
$var wire 1 $$ input2 $end
$var wire 1 "$ sum $end
$var wire 1 %$ w1 $end
$var wire 1 &$ w2 $end
$var wire 1 '$ w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[21] $end
$scope module ALU_bit $end
$var wire 1 ($ a $end
$var wire 1 )$ b $end
$var wire 1 *$ carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 +$ less $end
$var wire 2 ,$ operation [1:0] $end
$var wire 1 -$ result $end
$var wire 1 .$ carryOut $end
$var wire 1 /$ add $end
$var reg 1 0$ A $end
$var reg 1 1$ B $end
$var reg 1 -$ Result $end
$scope module M $end
$var wire 1 *$ carryIn $end
$var wire 1 .$ carryOut $end
$var wire 1 0$ input1 $end
$var wire 1 1$ input2 $end
$var wire 1 /$ sum $end
$var wire 1 2$ w1 $end
$var wire 1 3$ w2 $end
$var wire 1 4$ w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[22] $end
$scope module ALU_bit $end
$var wire 1 5$ a $end
$var wire 1 6$ b $end
$var wire 1 7$ carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 8$ less $end
$var wire 2 9$ operation [1:0] $end
$var wire 1 :$ result $end
$var wire 1 ;$ carryOut $end
$var wire 1 <$ add $end
$var reg 1 =$ A $end
$var reg 1 >$ B $end
$var reg 1 :$ Result $end
$scope module M $end
$var wire 1 7$ carryIn $end
$var wire 1 ;$ carryOut $end
$var wire 1 =$ input1 $end
$var wire 1 >$ input2 $end
$var wire 1 <$ sum $end
$var wire 1 ?$ w1 $end
$var wire 1 @$ w2 $end
$var wire 1 A$ w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[23] $end
$scope module ALU_bit $end
$var wire 1 B$ a $end
$var wire 1 C$ b $end
$var wire 1 D$ carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 E$ less $end
$var wire 2 F$ operation [1:0] $end
$var wire 1 G$ result $end
$var wire 1 H$ carryOut $end
$var wire 1 I$ add $end
$var reg 1 J$ A $end
$var reg 1 K$ B $end
$var reg 1 G$ Result $end
$scope module M $end
$var wire 1 D$ carryIn $end
$var wire 1 H$ carryOut $end
$var wire 1 J$ input1 $end
$var wire 1 K$ input2 $end
$var wire 1 I$ sum $end
$var wire 1 L$ w1 $end
$var wire 1 M$ w2 $end
$var wire 1 N$ w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[24] $end
$scope module ALU_bit $end
$var wire 1 O$ a $end
$var wire 1 P$ b $end
$var wire 1 Q$ carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 R$ less $end
$var wire 2 S$ operation [1:0] $end
$var wire 1 T$ result $end
$var wire 1 U$ carryOut $end
$var wire 1 V$ add $end
$var reg 1 W$ A $end
$var reg 1 X$ B $end
$var reg 1 T$ Result $end
$scope module M $end
$var wire 1 Q$ carryIn $end
$var wire 1 U$ carryOut $end
$var wire 1 W$ input1 $end
$var wire 1 X$ input2 $end
$var wire 1 V$ sum $end
$var wire 1 Y$ w1 $end
$var wire 1 Z$ w2 $end
$var wire 1 [$ w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[25] $end
$scope module ALU_bit $end
$var wire 1 \$ a $end
$var wire 1 ]$ b $end
$var wire 1 ^$ carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 _$ less $end
$var wire 2 `$ operation [1:0] $end
$var wire 1 a$ result $end
$var wire 1 b$ carryOut $end
$var wire 1 c$ add $end
$var reg 1 d$ A $end
$var reg 1 e$ B $end
$var reg 1 a$ Result $end
$scope module M $end
$var wire 1 ^$ carryIn $end
$var wire 1 b$ carryOut $end
$var wire 1 d$ input1 $end
$var wire 1 e$ input2 $end
$var wire 1 c$ sum $end
$var wire 1 f$ w1 $end
$var wire 1 g$ w2 $end
$var wire 1 h$ w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[26] $end
$scope module ALU_bit $end
$var wire 1 i$ a $end
$var wire 1 j$ b $end
$var wire 1 k$ carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 l$ less $end
$var wire 2 m$ operation [1:0] $end
$var wire 1 n$ result $end
$var wire 1 o$ carryOut $end
$var wire 1 p$ add $end
$var reg 1 q$ A $end
$var reg 1 r$ B $end
$var reg 1 n$ Result $end
$scope module M $end
$var wire 1 k$ carryIn $end
$var wire 1 o$ carryOut $end
$var wire 1 q$ input1 $end
$var wire 1 r$ input2 $end
$var wire 1 p$ sum $end
$var wire 1 s$ w1 $end
$var wire 1 t$ w2 $end
$var wire 1 u$ w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[27] $end
$scope module ALU_bit $end
$var wire 1 v$ a $end
$var wire 1 w$ b $end
$var wire 1 x$ carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 y$ less $end
$var wire 2 z$ operation [1:0] $end
$var wire 1 {$ result $end
$var wire 1 |$ carryOut $end
$var wire 1 }$ add $end
$var reg 1 ~$ A $end
$var reg 1 !% B $end
$var reg 1 {$ Result $end
$scope module M $end
$var wire 1 x$ carryIn $end
$var wire 1 |$ carryOut $end
$var wire 1 ~$ input1 $end
$var wire 1 !% input2 $end
$var wire 1 }$ sum $end
$var wire 1 "% w1 $end
$var wire 1 #% w2 $end
$var wire 1 $% w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[28] $end
$scope module ALU_bit $end
$var wire 1 %% a $end
$var wire 1 &% b $end
$var wire 1 '% carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 (% less $end
$var wire 2 )% operation [1:0] $end
$var wire 1 *% result $end
$var wire 1 +% carryOut $end
$var wire 1 ,% add $end
$var reg 1 -% A $end
$var reg 1 .% B $end
$var reg 1 *% Result $end
$scope module M $end
$var wire 1 '% carryIn $end
$var wire 1 +% carryOut $end
$var wire 1 -% input1 $end
$var wire 1 .% input2 $end
$var wire 1 ,% sum $end
$var wire 1 /% w1 $end
$var wire 1 0% w2 $end
$var wire 1 1% w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[29] $end
$scope module ALU_bit $end
$var wire 1 2% a $end
$var wire 1 3% b $end
$var wire 1 4% carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 5% less $end
$var wire 2 6% operation [1:0] $end
$var wire 1 7% result $end
$var wire 1 8% carryOut $end
$var wire 1 9% add $end
$var reg 1 :% A $end
$var reg 1 ;% B $end
$var reg 1 7% Result $end
$scope module M $end
$var wire 1 4% carryIn $end
$var wire 1 8% carryOut $end
$var wire 1 :% input1 $end
$var wire 1 ;% input2 $end
$var wire 1 9% sum $end
$var wire 1 <% w1 $end
$var wire 1 =% w2 $end
$var wire 1 >% w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[30] $end
$scope module ALU_bit $end
$var wire 1 ?% a $end
$var wire 1 @% b $end
$var wire 1 A% carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 B% less $end
$var wire 2 C% operation [1:0] $end
$var wire 1 D% result $end
$var wire 1 E% carryOut $end
$var wire 1 F% add $end
$var reg 1 G% A $end
$var reg 1 H% B $end
$var reg 1 D% Result $end
$scope module M $end
$var wire 1 A% carryIn $end
$var wire 1 E% carryOut $end
$var wire 1 G% input1 $end
$var wire 1 H% input2 $end
$var wire 1 F% sum $end
$var wire 1 I% w1 $end
$var wire 1 J% w2 $end
$var wire 1 K% w3 $end
$upscope $end
$upscope $end
$upscope $end
$scope module ALU0 $end
$var wire 1 L% a $end
$var wire 1 M% b $end
$var wire 1 ) carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 2 N% operation [1:0] $end
$var wire 1 O% result $end
$var wire 1 7 less $end
$var wire 1 P% carryOut $end
$var wire 1 Q% add $end
$var reg 1 R% A $end
$var reg 1 S% B $end
$var reg 1 O% Result $end
$scope module M $end
$var wire 1 ) carryIn $end
$var wire 1 P% carryOut $end
$var wire 1 R% input1 $end
$var wire 1 S% input2 $end
$var wire 1 Q% sum $end
$var wire 1 T% w1 $end
$var wire 1 U% w2 $end
$var wire 1 V% w3 $end
$upscope $end
$upscope $end
$scope module M $end
$var wire 1 W% carryIn $end
$var wire 1 X% carryOut $end
$var wire 1 : input1 $end
$var wire 1 ; input2 $end
$var wire 1 7 sum $end
$var wire 1 Y% w1 $end
$var wire 1 Z% w2 $end
$var wire 1 [% w3 $end
$upscope $end
$upscope $end
$scope module shifter $end
$var wire 1 ( leftRight $end
$var wire 32 \% result [31:0] $end
$var wire 32 ]% sftSrc [31:0] $end
$var wire 5 ^% shamt [4:0] $end
$var reg 32 _% Result [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx _%
bx ^%
bx ]%
bx \%
x[%
xZ%
xY%
xX%
xW%
xV%
xU%
xT%
xS%
xR%
xQ%
xP%
xO%
bx N%
xM%
xL%
xK%
xJ%
xI%
xH%
xG%
xF%
xE%
xD%
bx C%
0B%
xA%
x@%
x?%
x>%
x=%
x<%
x;%
x:%
x9%
x8%
x7%
bx 6%
05%
x4%
x3%
x2%
x1%
x0%
x/%
x.%
x-%
x,%
x+%
x*%
bx )%
0(%
x'%
x&%
x%%
x$%
x#%
x"%
x!%
x~$
x}$
x|$
x{$
bx z$
0y$
xx$
xw$
xv$
xu$
xt$
xs$
xr$
xq$
xp$
xo$
xn$
bx m$
0l$
xk$
xj$
xi$
xh$
xg$
xf$
xe$
xd$
xc$
xb$
xa$
bx `$
0_$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
bx S$
0R$
xQ$
xP$
xO$
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
xG$
bx F$
0E$
xD$
xC$
xB$
xA$
x@$
x?$
x>$
x=$
x<$
x;$
x:$
bx 9$
08$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
x.$
x-$
bx ,$
0+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
bx }#
0|#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
bx p#
0o#
xn#
xm#
xl#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
bx c#
0b#
xa#
x`#
x_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
bx V#
0U#
xT#
xS#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
bx I#
0H#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
bx <#
0;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
bx /#
0.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
bx "#
0!#
x~"
x}"
x|"
x{"
xz"
xy"
xx"
xw"
xv"
xu"
xt"
bx s"
0r"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
bx f"
0e"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
bx Y"
0X"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
bx L"
0K"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
bx ?"
0>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
bx 2"
01"
x0"
x/"
x."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
bx %"
0$"
x#"
x""
x!"
x~
x}
x|
x{
xz
xy
xx
xw
bx v
0u
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
bx i
0h
xg
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
bx \
0[
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
xP
bx O
0N
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
bx B
0A
x@
x?
x>
x=
x<
x;
x:
bx 9
bx 8
x7
bx 6
bx 5
bx 4
b0 3
b0 2
bx 1
bx 0
0/
bx .
bx -
bx ,
bx +
x*
x)
x(
bx '
x&
bx %
bx $
bx #
bx "
x!
$end
#5000
1/
#10000
0]
0j
0w
0&"
03"
0@"
0M"
0Z"
0g"
0t"
0##
00#
0=#
0J#
0W#
0d#
0q#
0~#
0-$
0:$
0G$
0T$
0a$
0n$
0{$
0*%
07%
0D%
0<
1P
0_
0l
0y
0("
05"
0B"
0O"
0\"
0i"
0v"
0%#
02#
0?#
0L#
0Y#
0f#
0s#
0"$
0/$
0<$
0I$
0V$
0c$
0p$
0}$
0,%
09%
0F%
07
0&
0C
1R
0Z
0g
0t
0#"
00"
0="
0J"
0W"
0d"
0q"
0~"
0-#
0:#
0G#
0T#
0a#
0n#
0{#
0*$
07$
0D$
0Q$
0^$
0k$
0x$
0'%
04%
0A%
0W%
0!
0=
0E
1M
0Q
0^
0k
0x
0'"
04"
0A"
0N"
0["
0h"
0u"
0$#
01#
0>#
0K#
0X#
0e#
0r#
0!$
0.$
0;$
0H$
0U$
0b$
0o$
0|$
0+%
08%
0E%
b101 %
b101 8
1O%
0@
0J
1D
0W
0d
0q
0~
0-"
0:"
0G"
0T"
0a"
0n"
0{"
0*#
07#
0D#
0Q#
0^#
0k#
0x#
0'$
04$
0A$
0N$
0[$
0h$
0u$
0$%
01%
0>%
0K%
1Q%
0P%
b10 9
0X%
0H
1I
0U
0V
0b
0c
0o
0p
0|
0}
0+"
0,"
08"
09"
0E"
0F"
0R"
0S"
0_"
0`"
0l"
0m"
0y"
0z"
0(#
0)#
05#
06#
0B#
0C#
0O#
0P#
0\#
0]#
0i#
0j#
0v#
0w#
0%$
0&$
02$
03$
0?$
0@$
0L$
0M$
0Y$
0Z$
0f$
0g$
0s$
0t$
0"%
0#%
0/%
00%
0<%
0=%
0I%
0J%
1T%
0U%
0[%
1F
0S
0`
0m
0z
0)"
06"
0C"
0P"
0]"
0j"
0w"
0&#
03#
0@#
0M#
0Z#
0g#
0t#
0#$
00$
0=$
0J$
0W$
0d$
0q$
0~$
0-%
0:%
0G%
0R%
1G
0T
0a
0n
0{
0*"
07"
0D"
0Q"
0^"
0k"
0x"
0'#
04#
0A#
0N#
0[#
0h#
0u#
0$$
01$
0>$
0K$
0X$
0e$
0r$
0!%
0.%
0;%
0H%
1S%
0Y%
0Z%
b110 $
b110 \%
b110 _%
1>
0K
0X
0e
0r
0!"
0."
0;"
0H"
0U"
0b"
0o"
0|"
0+#
08#
0E#
0R#
0_#
0l#
0y#
0($
05$
0B$
0O$
0\$
0i$
0v$
0%%
02%
0?%
0L%
1?
0L
0Y
0f
0s
0""
0/"
0<"
0I"
0V"
0c"
0p"
0}"
0,#
09#
0F#
0S#
0`#
0m#
0z#
0)$
06$
0C$
0P$
0]$
0j$
0w$
0&%
03%
0@%
1M%
0:
0V%
0;
1(
b1 "
b1 ^%
b11 #
b11 ]%
b10 ,
b10 4
b11 +
b11 5
0*
0)
b10 '
b10 6
b10 B
b10 O
b10 \
b10 i
b10 v
b10 %"
b10 2"
b10 ?"
b10 L"
b10 Y"
b10 f"
b10 s"
b10 "#
b10 /#
b10 <#
b10 I#
b10 V#
b10 c#
b10 p#
b10 }#
b10 ,$
b10 9$
b10 F$
b10 S$
b10 `$
b10 m$
b10 z$
b10 )%
b10 6%
b10 C%
b10 N%
b1 2
b10000100000000000000000000000000000011 1
b110 .
b100000000000000000000000000000001000000000000000000000000000000011 0
b101 -
0/
#11000
b1 3
#12000
b10 3
#15000
1/
#20000
0]
0_
0Z
1C
0M
1P
0Q
b110 %
b110 8
0O%
1E
b0 9
0D
1R
0W
0Q%
1H
0I
1U
0T%
0G
1T
0S%
b1 $
b1 \%
b1 _%
0?
1L
0M%
0(
b100 +
b100 5
b10 2
b100000000000000000000000000000011 1
b1 .
b100000000000000000000000000000001000000000000000000000000000000100 0
b110 -
0/
#21000
b11 3
#22000
b100 3
#25000
1/
#30000
1!
1=
b10 $
b10 \%
b10 _%
0C
b0 %
b0 8
0P
1(
b1 #
b1 ]%
b1 '
b1 6
b1 B
b1 O
b1 \
b1 i
b1 v
b1 %"
b1 2"
b1 ?"
b1 L"
b1 Y"
b1 f"
b1 s"
b1 "#
b1 /#
b1 <#
b1 I#
b1 V#
b1 c#
b1 p#
b1 }#
b1 ,$
b1 9$
b1 F$
b1 S$
b1 `$
b1 m$
b1 z$
b1 )%
b1 6%
b1 C%
b1 N%
b11 2
b10000100000000000000000000000000000001 1
b10 .
b10000000000000000000000000000001000000000000000000000000000000100 0
b100000000000000000000000000000000 -
0/
#31000
b101 3
#32000
b110 3
#35000
1/
#40000
1_
1Z
1Q
0R
1W
1M
0E
b110 9
1D
0!
0=
1Q%
0H
1I
b10 %
b10 8
1C
1T%
1G
1S%
b1000000000000000000000000000000 $
b1000000000000000000000000000000 \%
b1000000000000000000000000000000 _%
1?
1M%
0(
b10000000000000000000000000000000 #
b10000000000000000000000000000000 ]%
b111 +
b111 5
b100 2
b110000000000000000000000000000000 1
b1000000000000000000000000000000 .
b10000000000000000000000000000001000000000000000000000000000000111 0
b10 -
0/
#41000
b111 3
#42000
b1000 3
#45000
1/
#50000
xE
x@
b11x 9
xP%
x>
xK
xX
xe
xr
x!"
x."
x;"
xH"
xU"
xb"
xo"
x|"
x+#
x8#
xE#
xR#
x_#
xl#
xy#
x($
x5$
xB$
xO$
x\$
xi$
xv$
x%%
x2%
x?%
xL%
x?
xL
xY
xf
xs
x""
x/"
x<"
xI"
xV"
xc"
xp"
x}"
x,#
x9#
xF#
xS#
x`#
xm#
xz#
x)$
x6$
xC$
xP$
x]$
xj$
xw$
x&%
x3%
x@%
xM%
xQ%
xV%
x(
bx "
bx ^%
bx #
bx ]%
bx ,
bx 4
bx +
bx 5
x*
x)
bx '
bx 6
bx B
bx O
bx \
bx i
bx v
bx %"
bx 2"
bx ?"
bx L"
bx Y"
bx f"
bx s"
bx "#
bx /#
bx <#
bx I#
bx V#
bx c#
bx p#
bx }#
bx ,$
bx 9$
bx F$
bx S$
bx `$
bx m$
bx z$
bx )%
bx 6%
bx C%
bx N%
b101 2
bx 1
bx .
bx 0
bx -
0/
