$date
	Thu Jul 22 17:25:44 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module TestBench $end
$var wire 1 ! zero $end
$var wire 5 " shamt [4:0] $end
$var wire 32 # sftSrc [31:0] $end
$var wire 32 $ result_Shifter [31:0] $end
$var wire 32 % result_ALU [31:0] $end
$var wire 1 & overflow $end
$var wire 2 ' operation [1:0] $end
$var wire 1 ( leftRight $end
$var wire 1 ) invertB $end
$var wire 1 * invertA $end
$var wire 32 + aluSrc2 [31:0] $end
$var wire 32 , aluSrc1 [31:0] $end
$var reg 34 - ans_ALU [33:0] $end
$var reg 34 . ans_Shifter [33:0] $end
$var reg 1 / clk $end
$var reg 68 0 inp_ALU [67:0] $end
$var reg 68 1 inp_Shifter [67:0] $end
$var integer 32 2 i [31:0] $end
$var integer 32 3 score [31:0] $end
$scope module alu $end
$var wire 32 4 aluSrc1 [31:0] $end
$var wire 32 5 aluSrc2 [31:0] $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 2 6 operation [1:0] $end
$var wire 1 & overflow $end
$var wire 1 ! zero $end
$var wire 1 7 set $end
$var wire 32 8 result [31:0] $end
$var wire 32 9 carry [32:1] $end
$var reg 1 : A $end
$var reg 1 ; B $end
$var reg 1 < Result $end
$scope module ALU0 $end
$var wire 1 = a $end
$var wire 1 > b $end
$var wire 1 ) carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 2 ? operation [1:0] $end
$var wire 1 @ result $end
$var wire 1 7 less $end
$var wire 1 A carryOut $end
$var wire 1 B add $end
$var reg 1 C A $end
$var reg 1 D B $end
$var reg 1 @ Result $end
$scope module M $end
$var wire 1 ) carryIn $end
$var wire 1 A carryOut $end
$var wire 1 C input1 $end
$var wire 1 D input2 $end
$var wire 1 B sum $end
$var wire 1 E w1 $end
$var wire 1 F w2 $end
$var wire 1 G w3 $end
$upscope $end
$upscope $end
$scope module ALU1 $end
$var wire 1 H a $end
$var wire 1 I b $end
$var wire 1 J carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 K less $end
$var wire 2 L operation [1:0] $end
$var wire 1 M result $end
$var wire 1 N carryOut $end
$var wire 1 O add $end
$var reg 1 P A $end
$var reg 1 Q B $end
$var reg 1 M Result $end
$scope module M $end
$var wire 1 J carryIn $end
$var wire 1 N carryOut $end
$var wire 1 P input1 $end
$var wire 1 Q input2 $end
$var wire 1 O sum $end
$var wire 1 R w1 $end
$var wire 1 S w2 $end
$var wire 1 T w3 $end
$upscope $end
$upscope $end
$scope module ALU10 $end
$var wire 1 U a $end
$var wire 1 V b $end
$var wire 1 W carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 X less $end
$var wire 2 Y operation [1:0] $end
$var wire 1 Z result $end
$var wire 1 [ carryOut $end
$var wire 1 \ add $end
$var reg 1 ] A $end
$var reg 1 ^ B $end
$var reg 1 Z Result $end
$scope module M $end
$var wire 1 W carryIn $end
$var wire 1 [ carryOut $end
$var wire 1 ] input1 $end
$var wire 1 ^ input2 $end
$var wire 1 \ sum $end
$var wire 1 _ w1 $end
$var wire 1 ` w2 $end
$var wire 1 a w3 $end
$upscope $end
$upscope $end
$scope module ALU11 $end
$var wire 1 b a $end
$var wire 1 c b $end
$var wire 1 d carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 e less $end
$var wire 2 f operation [1:0] $end
$var wire 1 g result $end
$var wire 1 h carryOut $end
$var wire 1 i add $end
$var reg 1 j A $end
$var reg 1 k B $end
$var reg 1 g Result $end
$scope module M $end
$var wire 1 d carryIn $end
$var wire 1 h carryOut $end
$var wire 1 j input1 $end
$var wire 1 k input2 $end
$var wire 1 i sum $end
$var wire 1 l w1 $end
$var wire 1 m w2 $end
$var wire 1 n w3 $end
$upscope $end
$upscope $end
$scope module ALU12 $end
$var wire 1 o a $end
$var wire 1 p b $end
$var wire 1 q carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 r less $end
$var wire 2 s operation [1:0] $end
$var wire 1 t result $end
$var wire 1 u carryOut $end
$var wire 1 v add $end
$var reg 1 w A $end
$var reg 1 x B $end
$var reg 1 t Result $end
$scope module M $end
$var wire 1 q carryIn $end
$var wire 1 u carryOut $end
$var wire 1 w input1 $end
$var wire 1 x input2 $end
$var wire 1 v sum $end
$var wire 1 y w1 $end
$var wire 1 z w2 $end
$var wire 1 { w3 $end
$upscope $end
$upscope $end
$scope module ALU13 $end
$var wire 1 | a $end
$var wire 1 } b $end
$var wire 1 ~ carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 !" less $end
$var wire 2 "" operation [1:0] $end
$var wire 1 #" result $end
$var wire 1 $" carryOut $end
$var wire 1 %" add $end
$var reg 1 &" A $end
$var reg 1 '" B $end
$var reg 1 #" Result $end
$scope module M $end
$var wire 1 ~ carryIn $end
$var wire 1 $" carryOut $end
$var wire 1 &" input1 $end
$var wire 1 '" input2 $end
$var wire 1 %" sum $end
$var wire 1 (" w1 $end
$var wire 1 )" w2 $end
$var wire 1 *" w3 $end
$upscope $end
$upscope $end
$scope module ALU14 $end
$var wire 1 +" a $end
$var wire 1 ," b $end
$var wire 1 -" carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 ." less $end
$var wire 2 /" operation [1:0] $end
$var wire 1 0" result $end
$var wire 1 1" carryOut $end
$var wire 1 2" add $end
$var reg 1 3" A $end
$var reg 1 4" B $end
$var reg 1 0" Result $end
$scope module M $end
$var wire 1 -" carryIn $end
$var wire 1 1" carryOut $end
$var wire 1 3" input1 $end
$var wire 1 4" input2 $end
$var wire 1 2" sum $end
$var wire 1 5" w1 $end
$var wire 1 6" w2 $end
$var wire 1 7" w3 $end
$upscope $end
$upscope $end
$scope module ALU15 $end
$var wire 1 8" a $end
$var wire 1 9" b $end
$var wire 1 :" carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 ;" less $end
$var wire 2 <" operation [1:0] $end
$var wire 1 =" result $end
$var wire 1 >" carryOut $end
$var wire 1 ?" add $end
$var reg 1 @" A $end
$var reg 1 A" B $end
$var reg 1 =" Result $end
$scope module M $end
$var wire 1 :" carryIn $end
$var wire 1 >" carryOut $end
$var wire 1 @" input1 $end
$var wire 1 A" input2 $end
$var wire 1 ?" sum $end
$var wire 1 B" w1 $end
$var wire 1 C" w2 $end
$var wire 1 D" w3 $end
$upscope $end
$upscope $end
$scope module ALU16 $end
$var wire 1 E" a $end
$var wire 1 F" b $end
$var wire 1 G" carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 H" less $end
$var wire 2 I" operation [1:0] $end
$var wire 1 J" result $end
$var wire 1 K" carryOut $end
$var wire 1 L" add $end
$var reg 1 M" A $end
$var reg 1 N" B $end
$var reg 1 J" Result $end
$scope module M $end
$var wire 1 G" carryIn $end
$var wire 1 K" carryOut $end
$var wire 1 M" input1 $end
$var wire 1 N" input2 $end
$var wire 1 L" sum $end
$var wire 1 O" w1 $end
$var wire 1 P" w2 $end
$var wire 1 Q" w3 $end
$upscope $end
$upscope $end
$scope module ALU17 $end
$var wire 1 R" a $end
$var wire 1 S" b $end
$var wire 1 T" carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 U" less $end
$var wire 2 V" operation [1:0] $end
$var wire 1 W" result $end
$var wire 1 X" carryOut $end
$var wire 1 Y" add $end
$var reg 1 Z" A $end
$var reg 1 [" B $end
$var reg 1 W" Result $end
$scope module M $end
$var wire 1 T" carryIn $end
$var wire 1 X" carryOut $end
$var wire 1 Z" input1 $end
$var wire 1 [" input2 $end
$var wire 1 Y" sum $end
$var wire 1 \" w1 $end
$var wire 1 ]" w2 $end
$var wire 1 ^" w3 $end
$upscope $end
$upscope $end
$scope module ALU18 $end
$var wire 1 _" a $end
$var wire 1 `" b $end
$var wire 1 a" carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 b" less $end
$var wire 2 c" operation [1:0] $end
$var wire 1 d" result $end
$var wire 1 e" carryOut $end
$var wire 1 f" add $end
$var reg 1 g" A $end
$var reg 1 h" B $end
$var reg 1 d" Result $end
$scope module M $end
$var wire 1 a" carryIn $end
$var wire 1 e" carryOut $end
$var wire 1 g" input1 $end
$var wire 1 h" input2 $end
$var wire 1 f" sum $end
$var wire 1 i" w1 $end
$var wire 1 j" w2 $end
$var wire 1 k" w3 $end
$upscope $end
$upscope $end
$scope module ALU19 $end
$var wire 1 l" a $end
$var wire 1 m" b $end
$var wire 1 n" carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 o" less $end
$var wire 2 p" operation [1:0] $end
$var wire 1 q" result $end
$var wire 1 r" carryOut $end
$var wire 1 s" add $end
$var reg 1 t" A $end
$var reg 1 u" B $end
$var reg 1 q" Result $end
$scope module M $end
$var wire 1 n" carryIn $end
$var wire 1 r" carryOut $end
$var wire 1 t" input1 $end
$var wire 1 u" input2 $end
$var wire 1 s" sum $end
$var wire 1 v" w1 $end
$var wire 1 w" w2 $end
$var wire 1 x" w3 $end
$upscope $end
$upscope $end
$scope module ALU2 $end
$var wire 1 y" a $end
$var wire 1 z" b $end
$var wire 1 {" carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 |" less $end
$var wire 2 }" operation [1:0] $end
$var wire 1 ~" result $end
$var wire 1 !# carryOut $end
$var wire 1 "# add $end
$var reg 1 ## A $end
$var reg 1 $# B $end
$var reg 1 ~" Result $end
$scope module M $end
$var wire 1 {" carryIn $end
$var wire 1 !# carryOut $end
$var wire 1 ## input1 $end
$var wire 1 $# input2 $end
$var wire 1 "# sum $end
$var wire 1 %# w1 $end
$var wire 1 &# w2 $end
$var wire 1 '# w3 $end
$upscope $end
$upscope $end
$scope module ALU20 $end
$var wire 1 (# a $end
$var wire 1 )# b $end
$var wire 1 *# carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 +# less $end
$var wire 2 ,# operation [1:0] $end
$var wire 1 -# result $end
$var wire 1 .# carryOut $end
$var wire 1 /# add $end
$var reg 1 0# A $end
$var reg 1 1# B $end
$var reg 1 -# Result $end
$scope module M $end
$var wire 1 *# carryIn $end
$var wire 1 .# carryOut $end
$var wire 1 0# input1 $end
$var wire 1 1# input2 $end
$var wire 1 /# sum $end
$var wire 1 2# w1 $end
$var wire 1 3# w2 $end
$var wire 1 4# w3 $end
$upscope $end
$upscope $end
$scope module ALU21 $end
$var wire 1 5# a $end
$var wire 1 6# b $end
$var wire 1 7# carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 8# less $end
$var wire 2 9# operation [1:0] $end
$var wire 1 :# result $end
$var wire 1 ;# carryOut $end
$var wire 1 <# add $end
$var reg 1 =# A $end
$var reg 1 ># B $end
$var reg 1 :# Result $end
$scope module M $end
$var wire 1 7# carryIn $end
$var wire 1 ;# carryOut $end
$var wire 1 =# input1 $end
$var wire 1 ># input2 $end
$var wire 1 <# sum $end
$var wire 1 ?# w1 $end
$var wire 1 @# w2 $end
$var wire 1 A# w3 $end
$upscope $end
$upscope $end
$scope module ALU22 $end
$var wire 1 B# a $end
$var wire 1 C# b $end
$var wire 1 D# carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 E# less $end
$var wire 2 F# operation [1:0] $end
$var wire 1 G# result $end
$var wire 1 H# carryOut $end
$var wire 1 I# add $end
$var reg 1 J# A $end
$var reg 1 K# B $end
$var reg 1 G# Result $end
$scope module M $end
$var wire 1 D# carryIn $end
$var wire 1 H# carryOut $end
$var wire 1 J# input1 $end
$var wire 1 K# input2 $end
$var wire 1 I# sum $end
$var wire 1 L# w1 $end
$var wire 1 M# w2 $end
$var wire 1 N# w3 $end
$upscope $end
$upscope $end
$scope module ALU23 $end
$var wire 1 O# a $end
$var wire 1 P# b $end
$var wire 1 Q# carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 R# less $end
$var wire 2 S# operation [1:0] $end
$var wire 1 T# result $end
$var wire 1 U# carryOut $end
$var wire 1 V# add $end
$var reg 1 W# A $end
$var reg 1 X# B $end
$var reg 1 T# Result $end
$scope module M $end
$var wire 1 Q# carryIn $end
$var wire 1 U# carryOut $end
$var wire 1 W# input1 $end
$var wire 1 X# input2 $end
$var wire 1 V# sum $end
$var wire 1 Y# w1 $end
$var wire 1 Z# w2 $end
$var wire 1 [# w3 $end
$upscope $end
$upscope $end
$scope module ALU24 $end
$var wire 1 \# a $end
$var wire 1 ]# b $end
$var wire 1 ^# carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 _# less $end
$var wire 2 `# operation [1:0] $end
$var wire 1 a# result $end
$var wire 1 b# carryOut $end
$var wire 1 c# add $end
$var reg 1 d# A $end
$var reg 1 e# B $end
$var reg 1 a# Result $end
$scope module M $end
$var wire 1 ^# carryIn $end
$var wire 1 b# carryOut $end
$var wire 1 d# input1 $end
$var wire 1 e# input2 $end
$var wire 1 c# sum $end
$var wire 1 f# w1 $end
$var wire 1 g# w2 $end
$var wire 1 h# w3 $end
$upscope $end
$upscope $end
$scope module ALU25 $end
$var wire 1 i# a $end
$var wire 1 j# b $end
$var wire 1 k# carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 l# less $end
$var wire 2 m# operation [1:0] $end
$var wire 1 n# result $end
$var wire 1 o# carryOut $end
$var wire 1 p# add $end
$var reg 1 q# A $end
$var reg 1 r# B $end
$var reg 1 n# Result $end
$scope module M $end
$var wire 1 k# carryIn $end
$var wire 1 o# carryOut $end
$var wire 1 q# input1 $end
$var wire 1 r# input2 $end
$var wire 1 p# sum $end
$var wire 1 s# w1 $end
$var wire 1 t# w2 $end
$var wire 1 u# w3 $end
$upscope $end
$upscope $end
$scope module ALU26 $end
$var wire 1 v# a $end
$var wire 1 w# b $end
$var wire 1 x# carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 y# less $end
$var wire 2 z# operation [1:0] $end
$var wire 1 {# result $end
$var wire 1 |# carryOut $end
$var wire 1 }# add $end
$var reg 1 ~# A $end
$var reg 1 !$ B $end
$var reg 1 {# Result $end
$scope module M $end
$var wire 1 x# carryIn $end
$var wire 1 |# carryOut $end
$var wire 1 ~# input1 $end
$var wire 1 !$ input2 $end
$var wire 1 }# sum $end
$var wire 1 "$ w1 $end
$var wire 1 #$ w2 $end
$var wire 1 $$ w3 $end
$upscope $end
$upscope $end
$scope module ALU27 $end
$var wire 1 %$ a $end
$var wire 1 &$ b $end
$var wire 1 '$ carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 ($ less $end
$var wire 2 )$ operation [1:0] $end
$var wire 1 *$ result $end
$var wire 1 +$ carryOut $end
$var wire 1 ,$ add $end
$var reg 1 -$ A $end
$var reg 1 .$ B $end
$var reg 1 *$ Result $end
$scope module M $end
$var wire 1 '$ carryIn $end
$var wire 1 +$ carryOut $end
$var wire 1 -$ input1 $end
$var wire 1 .$ input2 $end
$var wire 1 ,$ sum $end
$var wire 1 /$ w1 $end
$var wire 1 0$ w2 $end
$var wire 1 1$ w3 $end
$upscope $end
$upscope $end
$scope module ALU28 $end
$var wire 1 2$ a $end
$var wire 1 3$ b $end
$var wire 1 4$ carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 5$ less $end
$var wire 2 6$ operation [1:0] $end
$var wire 1 7$ result $end
$var wire 1 8$ carryOut $end
$var wire 1 9$ add $end
$var reg 1 :$ A $end
$var reg 1 ;$ B $end
$var reg 1 7$ Result $end
$scope module M $end
$var wire 1 4$ carryIn $end
$var wire 1 8$ carryOut $end
$var wire 1 :$ input1 $end
$var wire 1 ;$ input2 $end
$var wire 1 9$ sum $end
$var wire 1 <$ w1 $end
$var wire 1 =$ w2 $end
$var wire 1 >$ w3 $end
$upscope $end
$upscope $end
$scope module ALU29 $end
$var wire 1 ?$ a $end
$var wire 1 @$ b $end
$var wire 1 A$ carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 B$ less $end
$var wire 2 C$ operation [1:0] $end
$var wire 1 D$ result $end
$var wire 1 E$ carryOut $end
$var wire 1 F$ add $end
$var reg 1 G$ A $end
$var reg 1 H$ B $end
$var reg 1 D$ Result $end
$scope module M $end
$var wire 1 A$ carryIn $end
$var wire 1 E$ carryOut $end
$var wire 1 G$ input1 $end
$var wire 1 H$ input2 $end
$var wire 1 F$ sum $end
$var wire 1 I$ w1 $end
$var wire 1 J$ w2 $end
$var wire 1 K$ w3 $end
$upscope $end
$upscope $end
$scope module ALU3 $end
$var wire 1 L$ a $end
$var wire 1 M$ b $end
$var wire 1 N$ carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 O$ less $end
$var wire 2 P$ operation [1:0] $end
$var wire 1 Q$ result $end
$var wire 1 R$ carryOut $end
$var wire 1 S$ add $end
$var reg 1 T$ A $end
$var reg 1 U$ B $end
$var reg 1 Q$ Result $end
$scope module M $end
$var wire 1 N$ carryIn $end
$var wire 1 R$ carryOut $end
$var wire 1 T$ input1 $end
$var wire 1 U$ input2 $end
$var wire 1 S$ sum $end
$var wire 1 V$ w1 $end
$var wire 1 W$ w2 $end
$var wire 1 X$ w3 $end
$upscope $end
$upscope $end
$scope module ALU30 $end
$var wire 1 Y$ a $end
$var wire 1 Z$ b $end
$var wire 1 [$ carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 \$ less $end
$var wire 2 ]$ operation [1:0] $end
$var wire 1 ^$ result $end
$var wire 1 _$ carryOut $end
$var wire 1 `$ add $end
$var reg 1 a$ A $end
$var reg 1 b$ B $end
$var reg 1 ^$ Result $end
$scope module M $end
$var wire 1 [$ carryIn $end
$var wire 1 _$ carryOut $end
$var wire 1 a$ input1 $end
$var wire 1 b$ input2 $end
$var wire 1 `$ sum $end
$var wire 1 c$ w1 $end
$var wire 1 d$ w2 $end
$var wire 1 e$ w3 $end
$upscope $end
$upscope $end
$scope module ALU4 $end
$var wire 1 f$ a $end
$var wire 1 g$ b $end
$var wire 1 h$ carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 i$ less $end
$var wire 2 j$ operation [1:0] $end
$var wire 1 k$ result $end
$var wire 1 l$ carryOut $end
$var wire 1 m$ add $end
$var reg 1 n$ A $end
$var reg 1 o$ B $end
$var reg 1 k$ Result $end
$scope module M $end
$var wire 1 h$ carryIn $end
$var wire 1 l$ carryOut $end
$var wire 1 n$ input1 $end
$var wire 1 o$ input2 $end
$var wire 1 m$ sum $end
$var wire 1 p$ w1 $end
$var wire 1 q$ w2 $end
$var wire 1 r$ w3 $end
$upscope $end
$upscope $end
$scope module ALU5 $end
$var wire 1 s$ a $end
$var wire 1 t$ b $end
$var wire 1 u$ carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 v$ less $end
$var wire 2 w$ operation [1:0] $end
$var wire 1 x$ result $end
$var wire 1 y$ carryOut $end
$var wire 1 z$ add $end
$var reg 1 {$ A $end
$var reg 1 |$ B $end
$var reg 1 x$ Result $end
$scope module M $end
$var wire 1 u$ carryIn $end
$var wire 1 y$ carryOut $end
$var wire 1 {$ input1 $end
$var wire 1 |$ input2 $end
$var wire 1 z$ sum $end
$var wire 1 }$ w1 $end
$var wire 1 ~$ w2 $end
$var wire 1 !% w3 $end
$upscope $end
$upscope $end
$scope module ALU6 $end
$var wire 1 "% a $end
$var wire 1 #% b $end
$var wire 1 $% carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 %% less $end
$var wire 2 &% operation [1:0] $end
$var wire 1 '% result $end
$var wire 1 (% carryOut $end
$var wire 1 )% add $end
$var reg 1 *% A $end
$var reg 1 +% B $end
$var reg 1 '% Result $end
$scope module M $end
$var wire 1 $% carryIn $end
$var wire 1 (% carryOut $end
$var wire 1 *% input1 $end
$var wire 1 +% input2 $end
$var wire 1 )% sum $end
$var wire 1 ,% w1 $end
$var wire 1 -% w2 $end
$var wire 1 .% w3 $end
$upscope $end
$upscope $end
$scope module ALU7 $end
$var wire 1 /% a $end
$var wire 1 0% b $end
$var wire 1 1% carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 2% less $end
$var wire 2 3% operation [1:0] $end
$var wire 1 4% result $end
$var wire 1 5% carryOut $end
$var wire 1 6% add $end
$var reg 1 7% A $end
$var reg 1 8% B $end
$var reg 1 4% Result $end
$scope module M $end
$var wire 1 1% carryIn $end
$var wire 1 5% carryOut $end
$var wire 1 7% input1 $end
$var wire 1 8% input2 $end
$var wire 1 6% sum $end
$var wire 1 9% w1 $end
$var wire 1 :% w2 $end
$var wire 1 ;% w3 $end
$upscope $end
$upscope $end
$scope module ALU8 $end
$var wire 1 <% a $end
$var wire 1 =% b $end
$var wire 1 >% carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 ?% less $end
$var wire 2 @% operation [1:0] $end
$var wire 1 A% result $end
$var wire 1 B% carryOut $end
$var wire 1 C% add $end
$var reg 1 D% A $end
$var reg 1 E% B $end
$var reg 1 A% Result $end
$scope module M $end
$var wire 1 >% carryIn $end
$var wire 1 B% carryOut $end
$var wire 1 D% input1 $end
$var wire 1 E% input2 $end
$var wire 1 C% sum $end
$var wire 1 F% w1 $end
$var wire 1 G% w2 $end
$var wire 1 H% w3 $end
$upscope $end
$upscope $end
$scope module ALU9 $end
$var wire 1 I% a $end
$var wire 1 J% b $end
$var wire 1 K% carryIn $end
$var wire 1 * invertA $end
$var wire 1 ) invertB $end
$var wire 1 L% less $end
$var wire 2 M% operation [1:0] $end
$var wire 1 N% result $end
$var wire 1 O% carryOut $end
$var wire 1 P% add $end
$var reg 1 Q% A $end
$var reg 1 R% B $end
$var reg 1 N% Result $end
$scope module M $end
$var wire 1 K% carryIn $end
$var wire 1 O% carryOut $end
$var wire 1 Q% input1 $end
$var wire 1 R% input2 $end
$var wire 1 P% sum $end
$var wire 1 S% w1 $end
$var wire 1 T% w2 $end
$var wire 1 U% w3 $end
$upscope $end
$upscope $end
$scope module M $end
$var wire 1 V% carryIn $end
$var wire 1 W% carryOut $end
$var wire 1 : input1 $end
$var wire 1 ; input2 $end
$var wire 1 7 sum $end
$var wire 1 X% w1 $end
$var wire 1 Y% w2 $end
$var wire 1 Z% w3 $end
$upscope $end
$upscope $end
$scope module shifter $end
$var wire 1 ( leftRight $end
$var wire 32 [% result [31:0] $end
$var wire 32 \% sftSrc [31:0] $end
$var wire 5 ]% shamt [4:0] $end
$var reg 32 ^% Result [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ^%
bx ]%
bx \%
bx [%
xZ%
xY%
xX%
xW%
xV%
xU%
xT%
xS%
xR%
xQ%
xP%
xO%
xN%
bx M%
0L%
xK%
xJ%
xI%
xH%
xG%
xF%
xE%
xD%
xC%
xB%
xA%
bx @%
0?%
x>%
x=%
x<%
x;%
x:%
x9%
x8%
x7%
x6%
x5%
x4%
bx 3%
02%
x1%
x0%
x/%
x.%
x-%
x,%
x+%
x*%
x)%
x(%
x'%
bx &%
0%%
x$%
x#%
x"%
x!%
x~$
x}$
x|$
x{$
xz$
xy$
xx$
bx w$
0v$
xu$
xt$
xs$
xr$
xq$
xp$
xo$
xn$
xm$
xl$
xk$
bx j$
0i$
xh$
xg$
xf$
xe$
xd$
xc$
xb$
xa$
x`$
x_$
x^$
bx ]$
0\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
bx P$
0O$
xN$
xM$
xL$
xK$
xJ$
xI$
xH$
xG$
xF$
xE$
xD$
bx C$
0B$
xA$
x@$
x?$
x>$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
bx 6$
05$
x4$
x3$
x2$
x1$
x0$
x/$
x.$
x-$
x,$
x+$
x*$
bx )$
0($
x'$
x&$
x%$
x$$
x#$
x"$
x!$
x~#
x}#
x|#
x{#
bx z#
0y#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
xp#
xo#
xn#
bx m#
0l#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
bx `#
0_#
x^#
x]#
x\#
x[#
xZ#
xY#
xX#
xW#
xV#
xU#
xT#
bx S#
0R#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
bx F#
0E#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
bx 9#
08#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
x0#
x/#
x.#
x-#
bx ,#
0+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
bx }"
0|"
x{"
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
bx p"
0o"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
bx c"
0b"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
bx V"
0U"
xT"
xS"
xR"
xQ"
xP"
xO"
xN"
xM"
xL"
xK"
xJ"
bx I"
0H"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
bx <"
0;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
bx /"
0."
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
bx ""
0!"
x~
x}
x|
x{
xz
xy
xx
xw
xv
xu
xt
bx s
0r
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
bx f
0e
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
bx Y
0X
xW
xV
xU
xT
xS
xR
xQ
xP
xO
xN
xM
bx L
0K
xJ
xI
xH
xG
xF
xE
xD
xC
xB
xA
x@
bx ?
x>
x=
x<
x;
x:
bx 9
bx 8
x7
bx 6
bx 5
bx 4
b0 3
b0 2
bx 1
bx 0
0/
bx .
bx -
bx ,
bx +
x*
x)
x(
bx '
x&
bx %
bx $
bx #
bx "
x!
$end
#5000
1/
#10000
0!
0Q$
0k$
0x$
0'%
04%
0A%
0N%
0Z
0g
0t
0#"
00"
0="
0J"
0W"
0d"
0q"
0-#
0:#
0G#
0T#
0a#
0n#
0{#
0*$
07$
0D$
0^$
0<
0M
1~"
0S$
0m$
0z$
0)%
06%
0C%
0P%
0\
0i
0v
0%"
02"
0?"
0L"
0Y"
0f"
0s"
0/#
0<#
0I#
0V#
0c#
0p#
0}#
0,$
09$
0F$
0`$
07
0&
0O
1"#
0N$
0h$
0u$
0$%
01%
0>%
0K%
0W
0d
0q
0~
0-"
0:"
0G"
0T"
0a"
0n"
0*#
07#
0D#
0Q#
0^#
0k#
0x#
0'$
04$
0A$
0[$
0V%
b101 %
b101 8
1@
0J
1{"
0!#
0R$
0l$
0y$
0(%
05%
0B%
0O%
0[
0h
0u
0$"
01"
0>"
0K"
0X"
0e"
0r"
0.#
0;#
0H#
0U#
0b#
0o#
0|#
0+$
08$
0E$
0_$
1B
0A
0T
1N
0'#
0X$
0r$
0!%
0.%
0;%
0H%
0U%
0a
0n
0{
0*"
07"
0D"
0Q"
0^"
0k"
0x"
04#
0A#
0N#
0[#
0h#
0u#
0$$
01$
0>$
0K$
0e$
b10 9
0W%
1E
0F
0R
1S
0%#
0&#
0V$
0W$
0p$
0q$
0}$
0~$
0,%
0-%
09%
0:%
0F%
0G%
0S%
0T%
0_
0`
0l
0m
0y
0z
0("
0)"
05"
06"
0B"
0C"
0O"
0P"
0\"
0]"
0i"
0j"
0v"
0w"
02#
03#
0?#
0@#
0L#
0M#
0Y#
0Z#
0f#
0g#
0s#
0t#
0"$
0#$
0/$
00$
0<$
0=$
0I$
0J$
0c$
0d$
0Z%
0C
1P
0##
0T$
0n$
0{$
0*%
07%
0D%
0Q%
0]
0j
0w
0&"
03"
0@"
0M"
0Z"
0g"
0t"
00#
0=#
0J#
0W#
0d#
0q#
0~#
0-$
0:$
0G$
0a$
1D
1Q
0$#
0U$
0o$
0|$
0+%
08%
0E%
0R%
0^
0k
0x
0'"
04"
0A"
0N"
0["
0h"
0u"
01#
0>#
0K#
0X#
0e#
0r#
0!$
0.$
0;$
0H$
0b$
0X%
0Y%
b110 $
b110 [%
b110 ^%
0=
1H
0y"
0L$
0f$
0s$
0"%
0/%
0<%
0I%
0U
0b
0o
0|
0+"
08"
0E"
0R"
0_"
0l"
0(#
05#
0B#
0O#
0\#
0i#
0v#
0%$
02$
0?$
0Y$
1>
1I
0z"
0M$
0g$
0t$
0#%
00%
0=%
0J%
0V
0c
0p
0}
0,"
09"
0F"
0S"
0`"
0m"
0)#
06#
0C#
0P#
0]#
0j#
0w#
0&$
03$
0@$
0Z$
0:
0G
0;
1(
b1 "
b1 ]%
b11 #
b11 \%
b10 ,
b10 4
b11 +
b11 5
0*
0)
b10 '
b10 6
b10 ?
b10 L
b10 Y
b10 f
b10 s
b10 ""
b10 /"
b10 <"
b10 I"
b10 V"
b10 c"
b10 p"
b10 }"
b10 ,#
b10 9#
b10 F#
b10 S#
b10 `#
b10 m#
b10 z#
b10 )$
b10 6$
b10 C$
b10 P$
b10 ]$
b10 j$
b10 w$
b10 &%
b10 3%
b10 @%
b10 M%
b1 2
b10000100000000000000000000000000000011 1
b110 .
b100000000000000000000000000000001000000000000000000000000000000011 0
b101 -
0/
#11000
b1 3
#12000
b10 3
#15000
1/
#20000
0Q$
0S$
0N$
0@
1M
0{"
b110 %
b110 8
1~"
0!#
0B
1O
b0 9
0N
1"#
0'#
0E
1R
0S
1%#
0D
0Q
1$#
b1 $
b1 [%
b1 ^%
0>
0I
1z"
0(
b100 +
b100 5
b10 2
b100000000000000000000000000000011 1
b1 .
b100000000000000000000000000000001000000000000000000000000000000100 0
b110 -
0/
#21000
b11 3
#22000
b100 3
#25000
1/
#30000
1!
b10 $
b10 [%
b10 ^%
0M
b0 %
b0 8
0~"
1(
b1 #
b1 \%
b1 '
b1 6
b1 ?
b1 L
b1 Y
b1 f
b1 s
b1 ""
b1 /"
b1 <"
b1 I"
b1 V"
b1 c"
b1 p"
b1 }"
b1 ,#
b1 9#
b1 F#
b1 S#
b1 `#
b1 m#
b1 z#
b1 )$
b1 6$
b1 C$
b1 P$
b1 ]$
b1 j$
b1 w$
b1 &%
b1 3%
b1 @%
b1 M%
b11 2
b10000100000000000000000000000000000001 1
b10 .
b10000000000000000000000000000001000000000000000000000000000000100 0
b100000000000000000000000000000000 -
0/
#31000
b101 3
#32000
b110 3
#35000
1/
#40000
1S$
1N$
1!#
0!
0"#
1'#
1{"
1B
0O
b110 9
1N
1E
0R
1S
b10 %
b10 8
1M
1D
1Q
b1000000000000000000000000000000 $
b1000000000000000000000000000000 [%
b1000000000000000000000000000000 ^%
1>
1I
0(
b10000000000000000000000000000000 #
b10000000000000000000000000000000 \%
b111 +
b111 5
b100 2
b110000000000000000000000000000000 1
b1000000000000000000000000000000 .
b10000000000000000000000000000001000000000000000000000000000000111 0
b10 -
0/
#41000
b111 3
#42000
b1000 3
#45000
1/
#50000
xO
xJ
b11x 9
xA
x=
xH
xy"
xL$
xf$
xs$
x"%
x/%
x<%
xI%
xU
xb
xo
x|
x+"
x8"
xE"
xR"
x_"
xl"
x(#
x5#
xB#
xO#
x\#
xi#
xv#
x%$
x2$
x?$
xY$
x>
xI
xz"
xM$
xg$
xt$
x#%
x0%
x=%
xJ%
xV
xc
xp
x}
x,"
x9"
xF"
xS"
x`"
xm"
x)#
x6#
xC#
xP#
x]#
xj#
xw#
x&$
x3$
x@$
xZ$
xB
xG
x(
bx "
bx ]%
bx #
bx \%
bx ,
bx 4
bx +
bx 5
x*
x)
bx '
bx 6
bx ?
bx L
bx Y
bx f
bx s
bx ""
bx /"
bx <"
bx I"
bx V"
bx c"
bx p"
bx }"
bx ,#
bx 9#
bx F#
bx S#
bx `#
bx m#
bx z#
bx )$
bx 6$
bx C$
bx P$
bx ]$
bx j$
bx w$
bx &%
bx 3%
bx @%
bx M%
b101 2
bx 1
bx .
bx 0
bx -
0/
